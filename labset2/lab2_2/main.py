# 1 -------------- Осуществите перегрузку оператор сложения ------------------------------------------------------------
# Для его перегрузки используется метод __add__().
# Он вызывается, когда объекты класса, имеющего данный метод, фигурируют в операции сложения, причем с левой стороны.
# Это значит, что в выражении a + b у объекта a должен быть метод __add__().
# Объект b может быть чем угодно, но чаще всего он бывает объектом того же класса.
# Объект b будет автоматически передаваться в метод __add__() в качестве второго аргумента (первый – self).
#
# • Отметим, в Python также есть правосторонний метод перегрузки сложения - __radd__().
#
# • Согласно полиморфизму ООП, возвращать метод __add__() может что угодно. Может вообще ничего не возвращать,
#   а "молча" вносить изменения в какие-то уже существующие объекты. Допустим, в вашей программе метод перегрузки
#   сложения будет возвращать новый объект того же класса.
#
# 2 -------------- Напишите класс Snow по следующему описанию ----------------------------------------------------------
# • В конструкторе класса инициируется поле, содержащее количество снежинок, выраженное целым числом.
#
# • Класс включает методы перегрузки арифметических операторов: __add__() – сложение, __sub__() – вычитание,
#   __mul__() – умножение, __truediv__() – деление. В классе код этих методов должен выполнять увеличение или
#   уменьшение количества снежинок на число n или в n раз. Метод __truediv__() перегружает обычное (/),
#   а не целочисленное (//) деление. Однако пусть в методе происходит округление значения до целого числа.
#
# • Класс включает метод makeSnow(), который принимает сам объект и число снежинок в ряду,
#   а возвращает строку вида "*****\n*****\n*****…", где количество снежинок между '\n' равно переданному аргументу,
#   а количество рядов вычисляется, исходя из общего количества снежинок.
#
# • Вызов объекта класса Snow в нотации функции с одним аргументом, должен приводить к перезаписи значения поля,
#   в котором хранится количество снежинок, на переданное в качестве аргумента значение.

from Override import Override
from Snow import Snow

o1 = Override()
# noinspection PyTypeChecker
result = o1 + 1
print([o1, result])
del o1, result, Override

snow_obj = Snow()
snow_obj + 3
snow_obj / 3
print(snow_obj + 13)

snow_obj.make_snow(6)
snow_obj(15)
print(snow_obj.flakes)
